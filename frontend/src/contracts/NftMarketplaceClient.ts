/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "createEvent(string,uint64,uint64,uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintNFT(string,string,uint64,uint64,pay)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "listingNFT(asset,uint64,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unListingNFT(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "buyNFT(uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getEventName(uint64)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNFTAmountLeft(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNFTPrice(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getEventByNFT(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNFTType(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNFTAsset(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getOrderOwner(uint64)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getOrderNFT(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getOrderPrice(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getOrderStatus(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "eventIndex": {
          "type": "uint64",
          "key": "eventIndex"
        },
        "nftIndex": {
          "type": "uint64",
          "key": "nftIndex"
        },
        "orderIndex": {
          "type": "uint64",
          "key": "orderIndex"
        },
        "nft": {
          "type": "uint64",
          "key": "nft"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "NftMarketplace",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createEvent",
        "args": [
          {
            "name": "name",
            "type": "string",
            "desc": ""
          },
          {
            "name": "nft1",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "nft2",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "nft3",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "nft1price",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "nft2price",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "nft3price",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "mintNFT",
        "args": [
          {
            "name": "name",
            "type": "string",
            "desc": ""
          },
          {
            "name": "url",
            "type": "string",
            "desc": ""
          },
          {
            "name": "eventId",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "nftType",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "payment",
            "type": "pay",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "listingNFT",
        "args": [
          {
            "name": "nft",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "price",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "axfer",
            "type": "axfer",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "unListingNFT",
        "args": [
          {
            "name": "orderId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "buyNFT",
        "args": [
          {
            "name": "orderId",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "payment",
            "type": "pay",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "getEventName",
        "args": [
          {
            "name": "eventId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "string",
          "desc": ""
        }
      },
      {
        "name": "getNFTAmountLeft",
        "args": [
          {
            "name": "eventId",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "nftType",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getNFTPrice",
        "args": [
          {
            "name": "eventId",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "nftType",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getEventByNFT",
        "args": [
          {
            "name": "nftIndex",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getNFTType",
        "args": [
          {
            "name": "nftIndex",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getNFTAsset",
        "args": [
          {
            "name": "nftIndex",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getOrderOwner",
        "args": [
          {
            "name": "orderId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "address",
          "desc": ""
        }
      },
      {
        "name": "getOrderNFT",
        "args": [
          {
            "name": "orderId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getOrderPrice",
        "args": [
          {
            "name": "orderId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getOrderStatus",
        "args": [
          {
            "name": "orderId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the NftMarketplace smart contract.
 */
export type NftMarketplace = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'createEvent(string,uint64,uint64,uint64,uint64,uint64,uint64)void' | 'createEvent', {
      argsObj: {
        name: string
        nft1: bigint | number
        nft2: bigint | number
        nft3: bigint | number
        nft1price: bigint | number
        nft2price: bigint | number
        nft3price: bigint | number
      }
      argsTuple: [name: string, nft1: bigint | number, nft2: bigint | number, nft3: bigint | number, nft1price: bigint | number, nft2price: bigint | number, nft3price: bigint | number]
      returns: void
    }>
    & Record<'mintNFT(string,string,uint64,uint64,pay)uint64' | 'mintNFT', {
      argsObj: {
        name: string
        url: string
        eventId: bigint | number
        nftType: bigint | number
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [name: string, url: string, eventId: bigint | number, nftType: bigint | number, payment: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: bigint
    }>
    & Record<'listingNFT(asset,uint64,axfer)void' | 'listingNFT', {
      argsObj: {
        nft: number | bigint
        price: bigint | number
        axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [nft: number | bigint, price: bigint | number, axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'unListingNFT(uint64)void' | 'unListingNFT', {
      argsObj: {
        orderId: bigint | number
      }
      argsTuple: [orderId: bigint | number]
      returns: void
    }>
    & Record<'buyNFT(uint64,pay)void' | 'buyNFT', {
      argsObj: {
        orderId: bigint | number
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [orderId: bigint | number, payment: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'getEventName(uint64)string' | 'getEventName', {
      argsObj: {
        eventId: bigint | number
      }
      argsTuple: [eventId: bigint | number]
      returns: string
    }>
    & Record<'getNFTAmountLeft(uint64,uint64)uint64' | 'getNFTAmountLeft', {
      argsObj: {
        eventId: bigint | number
        nftType: bigint | number
      }
      argsTuple: [eventId: bigint | number, nftType: bigint | number]
      returns: bigint
    }>
    & Record<'getNFTPrice(uint64,uint64)uint64' | 'getNFTPrice', {
      argsObj: {
        eventId: bigint | number
        nftType: bigint | number
      }
      argsTuple: [eventId: bigint | number, nftType: bigint | number]
      returns: bigint
    }>
    & Record<'getEventByNFT(uint64)uint64' | 'getEventByNFT', {
      argsObj: {
        nftIndex: bigint | number
      }
      argsTuple: [nftIndex: bigint | number]
      returns: bigint
    }>
    & Record<'getNFTType(uint64)uint64' | 'getNFTType', {
      argsObj: {
        nftIndex: bigint | number
      }
      argsTuple: [nftIndex: bigint | number]
      returns: bigint
    }>
    & Record<'getNFTAsset(uint64)uint64' | 'getNFTAsset', {
      argsObj: {
        nftIndex: bigint | number
      }
      argsTuple: [nftIndex: bigint | number]
      returns: bigint
    }>
    & Record<'getOrderOwner(uint64)address' | 'getOrderOwner', {
      argsObj: {
        orderId: bigint | number
      }
      argsTuple: [orderId: bigint | number]
      returns: string
    }>
    & Record<'getOrderNFT(uint64)uint64' | 'getOrderNFT', {
      argsObj: {
        orderId: bigint | number
      }
      argsTuple: [orderId: bigint | number]
      returns: bigint
    }>
    & Record<'getOrderPrice(uint64)uint64' | 'getOrderPrice', {
      argsObj: {
        orderId: bigint | number
      }
      argsTuple: [orderId: bigint | number]
      returns: bigint
    }>
    & Record<'getOrderStatus(uint64)uint64' | 'getOrderStatus', {
      argsObj: {
        orderId: bigint | number
      }
      argsTuple: [orderId: bigint | number]
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'eventIndex'?: IntegerState
      'nftIndex'?: IntegerState
      'orderIndex'?: IntegerState
      'nft'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type NftMarketplaceSig = keyof NftMarketplace['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends NftMarketplaceSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the NftMarketplace smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends NftMarketplaceSig> = NftMarketplace['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the NftMarketplace smart contract to the method's return type
 */
export type MethodReturn<TSignature extends NftMarketplaceSig> = NftMarketplace['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type NftMarketplaceCreateCalls = (typeof NftMarketplaceCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type NftMarketplaceCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type NftMarketplaceDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: NftMarketplaceCreateCalls) => NftMarketplaceCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class NftMarketplaceCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the NftMarketplace smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createEvent(string,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createEvent(args: MethodArgs<'createEvent(string,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createEvent(string,uint64,uint64,uint64,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.nft1, args.nft2, args.nft3, args.nft1price, args.nft2price, args.nft3price],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mintNFT(string,string,uint64,uint64,pay)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mintNft(args: MethodArgs<'mintNFT(string,string,uint64,uint64,pay)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mintNFT(string,string,uint64,uint64,pay)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.url, args.eventId, args.nftType, args.payment],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the listingNFT(asset,uint64,axfer)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static listingNft(args: MethodArgs<'listingNFT(asset,uint64,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'listingNFT(asset,uint64,axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.nft, args.price, args.axfer],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unListingNFT(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unListingNft(args: MethodArgs<'unListingNFT(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unListingNFT(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.orderId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the buyNFT(uint64,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static buyNft(args: MethodArgs<'buyNFT(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'buyNFT(uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.orderId, args.payment],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getEventName(uint64)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getEventName(args: MethodArgs<'getEventName(uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getEventName(uint64)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.eventId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getNFTAmountLeft(uint64,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getNftAmountLeft(args: MethodArgs<'getNFTAmountLeft(uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getNFTAmountLeft(uint64,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.eventId, args.nftType],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getNFTPrice(uint64,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getNftPrice(args: MethodArgs<'getNFTPrice(uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getNFTPrice(uint64,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.eventId, args.nftType],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getEventByNFT(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getEventByNft(args: MethodArgs<'getEventByNFT(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getEventByNFT(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.nftIndex],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getNFTType(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getNftType(args: MethodArgs<'getNFTType(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getNFTType(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.nftIndex],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getNFTAsset(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getNftAsset(args: MethodArgs<'getNFTAsset(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getNFTAsset(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.nftIndex],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getOrderOwner(uint64)address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getOrderOwner(args: MethodArgs<'getOrderOwner(uint64)address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getOrderOwner(uint64)address' as const,
      methodArgs: Array.isArray(args) ? args : [args.orderId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getOrderNFT(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getOrderNft(args: MethodArgs<'getOrderNFT(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getOrderNFT(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.orderId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getOrderPrice(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getOrderPrice(args: MethodArgs<'getOrderPrice(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getOrderPrice(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.orderId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getOrderStatus(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getOrderStatus(args: MethodArgs<'getOrderStatus(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getOrderStatus(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.orderId],
      ...params,
    }
  }
}

/**
 * A client to make calls to the NftMarketplace smart contract
 */
export class NftMarketplaceClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `NftMarketplaceClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof NftMarketplace['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the NftMarketplace smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: NftMarketplaceDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(NftMarketplaceCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the NftMarketplace smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(NftMarketplaceCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the NftMarketplace smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the createEvent(string,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createEvent(args: MethodArgs<'createEvent(string,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftMarketplaceCallFactory.createEvent(args, params))
  }

  /**
   * Calls the mintNFT(string,string,uint64,uint64,pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mintNft(args: MethodArgs<'mintNFT(string,string,uint64,uint64,pay)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftMarketplaceCallFactory.mintNft(args, params))
  }

  /**
   * Calls the listingNFT(asset,uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public listingNft(args: MethodArgs<'listingNFT(asset,uint64,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftMarketplaceCallFactory.listingNft(args, params))
  }

  /**
   * Calls the unListingNFT(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unListingNft(args: MethodArgs<'unListingNFT(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftMarketplaceCallFactory.unListingNft(args, params))
  }

  /**
   * Calls the buyNFT(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public buyNft(args: MethodArgs<'buyNFT(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftMarketplaceCallFactory.buyNft(args, params))
  }

  /**
   * Calls the getEventName(uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getEventName(args: MethodArgs<'getEventName(uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftMarketplaceCallFactory.getEventName(args, params))
  }

  /**
   * Calls the getNFTAmountLeft(uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getNftAmountLeft(args: MethodArgs<'getNFTAmountLeft(uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftMarketplaceCallFactory.getNftAmountLeft(args, params))
  }

  /**
   * Calls the getNFTPrice(uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getNftPrice(args: MethodArgs<'getNFTPrice(uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftMarketplaceCallFactory.getNftPrice(args, params))
  }

  /**
   * Calls the getEventByNFT(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getEventByNft(args: MethodArgs<'getEventByNFT(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftMarketplaceCallFactory.getEventByNft(args, params))
  }

  /**
   * Calls the getNFTType(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getNftType(args: MethodArgs<'getNFTType(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftMarketplaceCallFactory.getNftType(args, params))
  }

  /**
   * Calls the getNFTAsset(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getNftAsset(args: MethodArgs<'getNFTAsset(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftMarketplaceCallFactory.getNftAsset(args, params))
  }

  /**
   * Calls the getOrderOwner(uint64)address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getOrderOwner(args: MethodArgs<'getOrderOwner(uint64)address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftMarketplaceCallFactory.getOrderOwner(args, params))
  }

  /**
   * Calls the getOrderNFT(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getOrderNft(args: MethodArgs<'getOrderNFT(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftMarketplaceCallFactory.getOrderNft(args, params))
  }

  /**
   * Calls the getOrderPrice(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getOrderPrice(args: MethodArgs<'getOrderPrice(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftMarketplaceCallFactory.getOrderPrice(args, params))
  }

  /**
   * Calls the getOrderStatus(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getOrderStatus(args: MethodArgs<'getOrderStatus(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftMarketplaceCallFactory.getOrderStatus(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<NftMarketplace['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get eventIndex() {
        return NftMarketplaceClient.getIntegerState(state, 'eventIndex')
      },
      get nftIndex() {
        return NftMarketplaceClient.getIntegerState(state, 'nftIndex')
      },
      get orderIndex() {
        return NftMarketplaceClient.getIntegerState(state, 'orderIndex')
      },
      get nft() {
        return NftMarketplaceClient.getIntegerState(state, 'nft')
      },
    }
  }

  public compose(): NftMarketplaceComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      createEvent(args: MethodArgs<'createEvent(string,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createEvent(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mintNft(args: MethodArgs<'mintNFT(string,string,uint64,uint64,pay)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mintNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      listingNft(args: MethodArgs<'listingNFT(asset,uint64,axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.listingNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      unListingNft(args: MethodArgs<'unListingNFT(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unListingNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      buyNft(args: MethodArgs<'buyNFT(uint64,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.buyNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getEventName(args: MethodArgs<'getEventName(uint64)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getEventName(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getNftAmountLeft(args: MethodArgs<'getNFTAmountLeft(uint64,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getNftAmountLeft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getNftPrice(args: MethodArgs<'getNFTPrice(uint64,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getNftPrice(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getEventByNft(args: MethodArgs<'getEventByNFT(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getEventByNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getNftType(args: MethodArgs<'getNFTType(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getNftType(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getNftAsset(args: MethodArgs<'getNFTAsset(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getNftAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getOrderOwner(args: MethodArgs<'getOrderOwner(uint64)address'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getOrderOwner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getOrderNft(args: MethodArgs<'getOrderNFT(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getOrderNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getOrderPrice(args: MethodArgs<'getOrderPrice(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getOrderPrice(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getOrderStatus(args: MethodArgs<'getOrderStatus(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getOrderStatus(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as NftMarketplaceComposer
  }
}
export type NftMarketplaceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createEvent(string,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createEvent(args: MethodArgs<'createEvent(string,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftMarketplaceComposer<[...TReturns, MethodReturn<'createEvent(string,uint64,uint64,uint64,uint64,uint64,uint64)void'>]>

  /**
   * Calls the mintNFT(string,string,uint64,uint64,pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintNft(args: MethodArgs<'mintNFT(string,string,uint64,uint64,pay)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftMarketplaceComposer<[...TReturns, MethodReturn<'mintNFT(string,string,uint64,uint64,pay)uint64'>]>

  /**
   * Calls the listingNFT(asset,uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  listingNft(args: MethodArgs<'listingNFT(asset,uint64,axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftMarketplaceComposer<[...TReturns, MethodReturn<'listingNFT(asset,uint64,axfer)void'>]>

  /**
   * Calls the unListingNFT(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unListingNft(args: MethodArgs<'unListingNFT(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftMarketplaceComposer<[...TReturns, MethodReturn<'unListingNFT(uint64)void'>]>

  /**
   * Calls the buyNFT(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyNft(args: MethodArgs<'buyNFT(uint64,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftMarketplaceComposer<[...TReturns, MethodReturn<'buyNFT(uint64,pay)void'>]>

  /**
   * Calls the getEventName(uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getEventName(args: MethodArgs<'getEventName(uint64)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftMarketplaceComposer<[...TReturns, MethodReturn<'getEventName(uint64)string'>]>

  /**
   * Calls the getNFTAmountLeft(uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNftAmountLeft(args: MethodArgs<'getNFTAmountLeft(uint64,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftMarketplaceComposer<[...TReturns, MethodReturn<'getNFTAmountLeft(uint64,uint64)uint64'>]>

  /**
   * Calls the getNFTPrice(uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNftPrice(args: MethodArgs<'getNFTPrice(uint64,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftMarketplaceComposer<[...TReturns, MethodReturn<'getNFTPrice(uint64,uint64)uint64'>]>

  /**
   * Calls the getEventByNFT(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getEventByNft(args: MethodArgs<'getEventByNFT(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftMarketplaceComposer<[...TReturns, MethodReturn<'getEventByNFT(uint64)uint64'>]>

  /**
   * Calls the getNFTType(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNftType(args: MethodArgs<'getNFTType(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftMarketplaceComposer<[...TReturns, MethodReturn<'getNFTType(uint64)uint64'>]>

  /**
   * Calls the getNFTAsset(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNftAsset(args: MethodArgs<'getNFTAsset(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftMarketplaceComposer<[...TReturns, MethodReturn<'getNFTAsset(uint64)uint64'>]>

  /**
   * Calls the getOrderOwner(uint64)address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getOrderOwner(args: MethodArgs<'getOrderOwner(uint64)address'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftMarketplaceComposer<[...TReturns, MethodReturn<'getOrderOwner(uint64)address'>]>

  /**
   * Calls the getOrderNFT(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getOrderNft(args: MethodArgs<'getOrderNFT(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftMarketplaceComposer<[...TReturns, MethodReturn<'getOrderNFT(uint64)uint64'>]>

  /**
   * Calls the getOrderPrice(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getOrderPrice(args: MethodArgs<'getOrderPrice(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftMarketplaceComposer<[...TReturns, MethodReturn<'getOrderPrice(uint64)uint64'>]>

  /**
   * Calls the getOrderStatus(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getOrderStatus(args: MethodArgs<'getOrderStatus(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftMarketplaceComposer<[...TReturns, MethodReturn<'getOrderStatus(uint64)uint64'>]>

  /**
   * Makes a clear_state call to an existing instance of the NftMarketplace smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): NftMarketplaceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): NftMarketplaceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<NftMarketplaceComposerResults<TReturns>>
}
export type NftMarketplaceComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
